name: Build Wheels (CUDA)

on: workflow_dispatch

permissions:
  contents: write

jobs:
  define_matrix:
    name: Define Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Define Job Output
        id: set-matrix
        run: |
          $matrix = @{
              'os' = @('ubuntu-latest', 'windows-2019')
              'pyver' = @("3.9", "3.10", "3.11", "3.12")
              'cuda' = @("12.1.1", "12.2.2", "12.3.2", "12.4.1", "12.5.1", "12.6.2")
              'releasetag' = @("basic")
          }

          $matrixOut = ConvertTo-Json $matrix -Compress
          Write-Output ('matrix=' + $matrixOut) >> $env:GITHUB_OUTPUT

  build_wheels:
    name: Build Wheel ${{ matrix.os }} ${{ matrix.pyver }} ${{ matrix.cuda }}
    needs: define_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.define_matrix.outputs.matrix) }}
    defaults:
      run:
        shell: pwsh
    
    steps:
      - name: Add MSBuild to PATH
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[16.11,16.12)'

      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.pyver }}
          cache: 'pip'

      - name: Setup CUDA
        uses: Jimver/cuda-toolkit@v0.2.19
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda }}
          method: 'network'
          sub-packages: '["nvcc", "cudart"]'
          non-cuda-sub-packages: '["libcublas", "libcublas-dev"]'

      - name: Install Python Dependencies
        run: python -m pip install build wheel

      - name: Build Wheel
        env:
          CUDA_PATH: ${{ steps.cuda-toolkit.outputs.CUDA_PATH }}
          CUDA_HOME: ${{ steps.cuda-toolkit.outputs.CUDA_PATH }}
          CMAKE_ARGS: >-
            -DGGML_CUDA=on 
            -DCMAKE_CUDA_ARCHITECTURES=all 
            -DGGML_CUDA_FORCE_MMQ=ON 
            -DGGML_AVX2=off 
            -DGGML_FMA=off 
            -DGGML_F16C=off
        run: |
          $cudaVersion = '${{ matrix.cuda }}'.Remove('${{ matrix.cuda }}'.LastIndexOf('.')).Replace('.','')
          Write-Output "CUDA_VERSION=$cudaVersion" >> $env:GITHUB_ENV
          python -m build --wheel

      - uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          tag_name: ${{ github.ref_name }}-cu${{ env.CUDA_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}